# -*- coding: utf-8 -*-
"""pract4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_Mb90kHlhHH7U7-KcDhVWw0_LQbg21Xr
"""

def max_crossing_subarray(array, left, mid, right, constraint):
    max_sum = float('-inf')
    best_subarray = []

    # Left part
    temp_sum = 0
    left_sum = 0
    left_part = []
    for i in range(mid, left - 1, -1):
        temp_sum += array[i]
        if temp_sum <= constraint and temp_sum > left_sum:
            left_sum = temp_sum
            left_part = array[i:mid + 1]

    # Right part
    temp_sum = 0
    right_sum = 0
    right_part = []
    for j in range(mid + 1, right + 1):
        temp_sum += array[j]
        if temp_sum <= constraint and temp_sum > right_sum:
            right_sum = temp_sum
            right_part = array[mid + 1:j + 1]

    total = left_sum + right_sum
    if total <= constraint:
        best_subarray = left_part + right_part
        max_sum = total
    else:
        if left_sum >= right_sum:
            best_subarray = left_part
            max_sum = left_sum
        else:
            best_subarray = right_part
            max_sum = right_sum

    return max_sum, best_subarray

def max_subarray(array, left, right, constraint):
    if left > right:
        return float('-inf'), []
    if left == right:
        return (array[left], [array[left]]) if array[left] <= constraint else (float('-inf'), [])

    mid = (left + right) // 2
    left_max_sum, left_subarray = max_subarray(array, left, mid, constraint)
    right_max_sum, right_subarray = max_subarray(array, mid + 1, right, constraint)
    cross_max_sum, cross_subarray = max_crossing_subarray(array, left, mid, right, constraint)

    if left_max_sum >= right_max_sum and left_max_sum >= cross_max_sum:
        return left_max_sum, left_subarray
    elif right_max_sum >= left_max_sum and right_max_sum >= cross_max_sum:
        return right_max_sum, right_subarray
    else:
        return cross_max_sum, cross_subarray

# Test cases
test_cases = [
    ([2, 1, 3, 4], 5),
    ([2, 2, 2, 2], 4),
    ([1, 5, 2, 3], 5),
    ([6, 7, 8], 5),
    ([1, 2, 3, 2, 1], 5),
    ([1, 1, 1, 1, 1], 4),
    ([4, 2, 3, 1], 5),
    ([], 10),
    ([1, 2, 3], 0),
    (list(range(1, 100001)), 10**9)
]

# Execution
for i, (array, constraint) in enumerate(test_cases, 1):
    if not array:
        print(f"Test Case {i}: No feasible subarray (empty array)")
        continue
    max_sum, subarray = max_subarray(array, 0, len(array) - 1, constraint)
    if max_sum == float('-inf') or not subarray:
        print(f"Test Case {i}: No feasible subarray (constraint = {constraint})")
    else:
        preview = subarray[:10]
        suffix = "..." if len(subarray) > 10 else ""
        print(f"Test Case {i}: Max Sum = {max_sum}, Subarray = {preview}{suffix}")

